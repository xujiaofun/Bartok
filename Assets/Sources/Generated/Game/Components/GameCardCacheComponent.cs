//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity cardCacheEntity { get { return GetGroup(GameMatcher.CardCache).GetSingleEntity(); } }
    public Bartok.CardCacheComponent cardCache { get { return cardCacheEntity.cardCache; } }
    public bool hasCardCache { get { return cardCacheEntity != null; } }

    public GameEntity SetCardCache(System.Collections.Generic.List<GameEntity> newValue) {
        if (hasCardCache) {
            throw new Entitas.EntitasException("Could not set CardCache!\n" + this + " already has an entity with Bartok.CardCacheComponent!",
                "You should check if the context already has a cardCacheEntity before setting it or use context.ReplaceCardCache().");
        }
        var entity = CreateEntity();
        entity.AddCardCache(newValue);
        return entity;
    }

    public void ReplaceCardCache(System.Collections.Generic.List<GameEntity> newValue) {
        var entity = cardCacheEntity;
        if (entity == null) {
            entity = SetCardCache(newValue);
        } else {
            entity.ReplaceCardCache(newValue);
        }
    }

    public void RemoveCardCache() {
        cardCacheEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Bartok.CardCacheComponent cardCache { get { return (Bartok.CardCacheComponent)GetComponent(GameComponentsLookup.CardCache); } }
    public bool hasCardCache { get { return HasComponent(GameComponentsLookup.CardCache); } }

    public void AddCardCache(System.Collections.Generic.List<GameEntity> newValue) {
        var index = GameComponentsLookup.CardCache;
        var component = CreateComponent<Bartok.CardCacheComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCardCache(System.Collections.Generic.List<GameEntity> newValue) {
        var index = GameComponentsLookup.CardCache;
        var component = CreateComponent<Bartok.CardCacheComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCardCache() {
        RemoveComponent(GameComponentsLookup.CardCache);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCardCache;

    public static Entitas.IMatcher<GameEntity> CardCache {
        get {
            if (_matcherCardCache == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CardCache);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCardCache = matcher;
            }

            return _matcherCardCache;
        }
    }
}
